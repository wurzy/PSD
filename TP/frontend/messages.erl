%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.16.0
-module(messages).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_Type/1, enum_value_by_symbol_Type/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'Type'() :: 'REGISTER' | 'LOGIN' | 'LOGOUT' | 'REPLY' | 'LOCATION' | 'SICK'.
-export_type(['Type'/0]).

%% message types
-type 'Reply'() ::
      #{result                  => boolean() | 0 | 1, % = 1, required
        message                 => iodata()         % = 2, required
       }.

-type 'Message'() ::
      #{type                    => 'REGISTER' | 'LOGIN' | 'LOGOUT' | 'REPLY' | 'LOCATION' | 'SICK' | integer(), % = 1, required, enum Type
        registerData            => 'Register'(),    % = 2, optional
        loginData               => 'Login'(),       % = 3, optional
        logoutData              => 'Logout'(),      % = 4, optional
        replyData               => 'Reply'()        % = 5, optional
       }.

-type 'Register'() ::
      #{username                => iodata(),        % = 1, required
        password                => iodata(),        % = 2, required
        district                => iodata()         % = 3, required
       }.

-type 'Login'() ::
      #{username                => iodata(),        % = 1, required
        password                => iodata()         % = 2, required
       }.

-type 'Logout'() ::
      #{username                => iodata(),        % = 1, required
        password                => iodata()         % = 2, required
       }.

-export_type(['Reply'/0, 'Message'/0, 'Register'/0, 'Login'/0, 'Logout'/0]).

-spec encode_msg('Reply'() | 'Message'() | 'Register'() | 'Login'() | 'Logout'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []).

-spec encode_msg('Reply'() | 'Message'() | 'Register'() | 'Login'() | 'Logout'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'Reply' -> encode_msg_Reply(id(Msg, TrUserData), TrUserData);
        'Message' -> encode_msg_Message(id(Msg, TrUserData), TrUserData);
        'Register' -> encode_msg_Register(id(Msg, TrUserData), TrUserData);
        'Login' -> encode_msg_Login(id(Msg, TrUserData), TrUserData);
        'Logout' -> encode_msg_Logout(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_Reply(Msg, TrUserData) -> encode_msg_Reply(Msg, <<>>, TrUserData).


encode_msg_Reply(#{result := F1, message := F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end.

encode_msg_Message(Msg, TrUserData) -> encode_msg_Message(Msg, <<>>, TrUserData).


encode_msg_Message(#{type := F1} = M, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_enum_Type(TrF1, <<Bin/binary, 8>>, TrUserData) end,
    B2 = case M of
             #{registerData := F2} -> begin TrF2 = id(F2, TrUserData), e_mfield_Message_registerData(TrF2, <<B1/binary, 18>>, TrUserData) end;
             _ -> B1
         end,
    B3 = case M of
             #{loginData := F3} -> begin TrF3 = id(F3, TrUserData), e_mfield_Message_loginData(TrF3, <<B2/binary, 26>>, TrUserData) end;
             _ -> B2
         end,
    B4 = case M of
             #{logoutData := F4} -> begin TrF4 = id(F4, TrUserData), e_mfield_Message_logoutData(TrF4, <<B3/binary, 34>>, TrUserData) end;
             _ -> B3
         end,
    case M of
        #{replyData := F5} -> begin TrF5 = id(F5, TrUserData), e_mfield_Message_replyData(TrF5, <<B4/binary, 42>>, TrUserData) end;
        _ -> B4
    end.

encode_msg_Register(Msg, TrUserData) -> encode_msg_Register(Msg, <<>>, TrUserData).


encode_msg_Register(#{username := F1, password := F2, district := F3}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    B2 = begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end,
    begin TrF3 = id(F3, TrUserData), e_type_string(TrF3, <<B2/binary, 26>>, TrUserData) end.

encode_msg_Login(Msg, TrUserData) -> encode_msg_Login(Msg, <<>>, TrUserData).


encode_msg_Login(#{username := F1, password := F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end.

encode_msg_Logout(Msg, TrUserData) -> encode_msg_Logout(Msg, <<>>, TrUserData).


encode_msg_Logout(#{username := F1, password := F2}, Bin, TrUserData) ->
    B1 = begin TrF1 = id(F1, TrUserData), e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData) end,
    begin TrF2 = id(F2, TrUserData), e_type_string(TrF2, <<B1/binary, 18>>, TrUserData) end.

e_mfield_Message_registerData(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Register(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_loginData(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Login(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_logoutData(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Logout(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Message_replyData(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_Reply(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_enum_Type('REGISTER', Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_enum_Type('LOGIN', Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_enum_Type('LOGOUT', Bin, _TrUserData) -> <<Bin/binary, 2>>;
e_enum_Type('REPLY', Bin, _TrUserData) -> <<Bin/binary, 3>>;
e_enum_Type('LOCATION', Bin, _TrUserData) -> <<Bin/binary, 4>>;
e_enum_Type('SICK', Bin, _TrUserData) -> <<Bin/binary, 5>>;
e_enum_Type(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_unknown_elems/2}).
e_unknown_elems([Elem | Rest], Bin) ->
    BinR = case Elem of
               {varint, FNum, N} ->
                   BinF = e_varint(FNum bsl 3, Bin),
                   e_varint(N, BinF);
               {length_delimited, FNum, Data} ->
                   BinF = e_varint(FNum bsl 3 bor 2, Bin),
                   BinL = e_varint(byte_size(Data), BinF),
                   <<BinL/binary, Data/binary>>;
               {group, FNum, GroupFields} ->
                   Bin1 = e_varint(FNum bsl 3 bor 3, Bin),
                   Bin2 = e_unknown_elems(GroupFields, Bin1),
                   e_varint(FNum bsl 3 bor 4, Bin2);
               {fixed32, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 5, Bin),
                   <<BinF/binary, V:32/little>>;
               {fixed64, FNum, V} ->
                   BinF = e_varint(FNum bsl 3 bor 1, Bin),
                   <<BinF/binary, V:64/little>>
           end,
    e_unknown_elems(Rest, BinR);
e_unknown_elems([], Bin) -> Bin.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('Reply', Bin, TrUserData) -> id(decode_msg_Reply(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Message', Bin, TrUserData) -> id(decode_msg_Message(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Register', Bin, TrUserData) -> id(decode_msg_Register(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Login', Bin, TrUserData) -> id(decode_msg_Login(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Logout', Bin, TrUserData) -> id(decode_msg_Logout(Bin, TrUserData), TrUserData).



decode_msg_Reply(Bin, TrUserData) -> dfp_read_field_def_Reply(Bin, 0, 0, 0, id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Reply(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Reply_result(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Reply(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Reply_message(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Reply(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{result => F@_1, message => F@_2};
dfp_read_field_def_Reply(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_Reply(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_Reply(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_Reply(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_Reply(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Reply_result(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_Reply_message(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Reply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_Reply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_Reply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_Reply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_Reply(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_Reply(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{result => F@_1, message => F@_2}.

d_field_Reply_result(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Reply_result(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Reply_result(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0, TrUserData), Rest},
    dfp_read_field_def_Reply(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_Reply_message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Reply_message(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Reply_message(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Reply(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_Reply(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_Reply(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_Reply(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Reply(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_Reply(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_Reply(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_Reply(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Reply(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_Reply(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Reply(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_Reply(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Reply(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_Reply(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Reply(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_Message(Bin, TrUserData) -> dfp_read_field_def_Message(Bin, 0, 0, 0, id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Message(<<8, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_Message_type(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Message(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_Message_registerData(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Message(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_Message_loginData(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Message(<<34, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_Message_logoutData(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Message(<<42, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> d_field_Message_replyData(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_Message(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    S1 = #{type => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
            true -> S1#{registerData => F@_2}
         end,
    S3 = if F@_3 == '$undef' -> S2;
            true -> S2#{loginData => F@_3}
         end,
    S4 = if F@_4 == '$undef' -> S3;
            true -> S3#{logoutData => F@_4}
         end,
    if F@_5 == '$undef' -> S4;
       true -> S4#{replyData => F@_5}
    end;
dfp_read_field_def_Message(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dg_read_field_def_Message(Other, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_Message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 32 - 7 -> dg_read_field_def_Message(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_Message(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_Message_type(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        18 -> d_field_Message_registerData(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        26 -> d_field_Message_loginData(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        34 -> d_field_Message_logoutData(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        42 -> d_field_Message_replyData(Rest, 0, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                1 -> skip_64_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                2 -> skip_length_delimited_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                3 -> skip_group_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
                5 -> skip_32_Message(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
            end
    end;
dg_read_field_def_Message(<<>>, 0, 0, _, F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    S1 = #{type => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
            true -> S1#{registerData => F@_2}
         end,
    S3 = if F@_3 == '$undef' -> S2;
            true -> S2#{loginData => F@_3}
         end,
    S4 = if F@_4 == '$undef' -> S3;
            true -> S3#{logoutData => F@_4}
         end,
    if F@_5 == '$undef' -> S4;
       true -> S4#{replyData => F@_5}
    end.

d_field_Message_type(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_Message_type(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Message_type(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_Type(begin <<Res:32/signed-native>> = <<(X bsl N + Acc):32/unsigned-native>>, id(Res, TrUserData) end), TrUserData), Rest},
    dfp_read_field_def_Message(RestF, 0, 0, F, NewFValue, F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_Message_registerData(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_Message_registerData(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Message_registerData(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, Prev, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Register(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               if Prev == '$undef' -> NewFValue;
                                  true -> merge_msg_Register(Prev, NewFValue, TrUserData)
                               end,
                               F@_3,
                               F@_4,
                               F@_5,
                               TrUserData).

d_field_Message_loginData(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_Message_loginData(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Message_loginData(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, Prev, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Login(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               F@_2,
                               if Prev == '$undef' -> NewFValue;
                                  true -> merge_msg_Login(Prev, NewFValue, TrUserData)
                               end,
                               F@_4,
                               F@_5,
                               TrUserData).

d_field_Message_logoutData(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_Message_logoutData(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Message_logoutData(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, Prev, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Logout(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               F@_2,
                               F@_3,
                               if Prev == '$undef' -> NewFValue;
                                  true -> merge_msg_Logout(Prev, NewFValue, TrUserData)
                               end,
                               F@_5,
                               TrUserData).

d_field_Message_replyData(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> d_field_Message_replyData(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_Message_replyData(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_Reply(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_Message(RestF,
                               0,
                               0,
                               F,
                               F@_1,
                               F@_2,
                               F@_3,
                               F@_4,
                               if Prev == '$undef' -> NewFValue;
                                  true -> merge_msg_Reply(Prev, NewFValue, TrUserData)
                               end,
                               TrUserData).

skip_varint_Message(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> skip_varint_Message(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_Message(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_Message(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_Message(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) when N < 57 -> skip_length_delimited_Message(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_length_delimited_Message(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Message(Rest2, 0, 0, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_Message(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Message(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_Message(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_Message(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_Message(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) -> dfp_read_field_def_Message(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_Register(Bin, TrUserData) -> dfp_read_field_def_Register(Bin, 0, 0, 0, id('$undef', TrUserData), id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Register(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Register_username(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Register(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Register_password(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Register(<<26, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> d_field_Register_district(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_Register(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{username => F@_1, password => F@_2, district => F@_3};
dfp_read_field_def_Register(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dg_read_field_def_Register(Other, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_Register(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 32 - 7 -> dg_read_field_def_Register(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_Register(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_Register_username(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        18 -> d_field_Register_password(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        26 -> d_field_Register_district(Rest, 0, 0, 0, F@_1, F@_2, F@_3, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Register(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                1 -> skip_64_Register(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                2 -> skip_length_delimited_Register(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                3 -> skip_group_Register(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData);
                5 -> skip_32_Register(Rest, 0, 0, Key bsr 3, F@_1, F@_2, F@_3, TrUserData)
            end
    end;
dg_read_field_def_Register(<<>>, 0, 0, _, F@_1, F@_2, F@_3, _) -> #{username => F@_1, password => F@_2, district => F@_3}.

d_field_Register_username(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Register_username(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_Register_username(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Register(RestF, 0, 0, F, NewFValue, F@_2, F@_3, TrUserData).

d_field_Register_password(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Register_password(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_Register_password(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Register(RestF, 0, 0, F, F@_1, NewFValue, F@_3, TrUserData).

d_field_Register_district(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> d_field_Register_district(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
d_field_Register_district(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Register(RestF, 0, 0, F, F@_1, F@_2, NewFValue, TrUserData).

skip_varint_Register(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> skip_varint_Register(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData);
skip_varint_Register(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Register(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_Register(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) when N < 57 -> skip_length_delimited_Register(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_Register(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Register(Rest2, 0, 0, F, F@_1, F@_2, F@_3, TrUserData).

skip_group_Register(Bin, _, Z2, FNum, F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Register(Rest, 0, Z2, FNum, F@_1, F@_2, F@_3, TrUserData).

skip_32_Register(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Register(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

skip_64_Register(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData) -> dfp_read_field_def_Register(Rest, Z1, Z2, F, F@_1, F@_2, F@_3, TrUserData).

decode_msg_Login(Bin, TrUserData) -> dfp_read_field_def_Login(Bin, 0, 0, 0, id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Login(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Login_username(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Login(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Login_password(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Login(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{username => F@_1, password => F@_2};
dfp_read_field_def_Login(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_Login(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_Login(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_Login(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_Login(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_Login_username(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_Login_password(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Login(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_Login(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_Login(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_Login(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_Login(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_Login(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{username => F@_1, password => F@_2}.

d_field_Login_username(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Login_username(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Login_username(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Login(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_Login_password(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Login_password(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Login_password(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Login(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_Login(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_Login(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_Login(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Login(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_Login(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_Login(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_Login(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Login(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_Login(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Login(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_Login(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Login(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_Login(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Login(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

decode_msg_Logout(Bin, TrUserData) -> dfp_read_field_def_Logout(Bin, 0, 0, 0, id('$undef', TrUserData), id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Logout(<<10, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Logout_username(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Logout(<<18, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> d_field_Logout_password(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
dfp_read_field_def_Logout(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{username => F@_1, password => F@_2};
dfp_read_field_def_Logout(Other, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dg_read_field_def_Logout(Other, Z1, Z2, F, F@_1, F@_2, TrUserData).

dg_read_field_def_Logout(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_Logout(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
dg_read_field_def_Logout(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_Logout_username(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_Logout_password(Rest, 0, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_Logout(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                1 -> skip_64_Logout(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_Logout(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                3 -> skip_group_Logout(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData);
                5 -> skip_32_Logout(Rest, 0, 0, Key bsr 3, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_Logout(<<>>, 0, 0, _, F@_1, F@_2, _) -> #{username => F@_1, password => F@_2}.

d_field_Logout_username(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Logout_username(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Logout_username(<<0:1, X:7, Rest/binary>>, N, Acc, F, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Logout(RestF, 0, 0, F, NewFValue, F@_2, TrUserData).

d_field_Logout_password(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> d_field_Logout_password(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
d_field_Logout_password(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Utf8:Len/binary, Rest2/binary>> = Rest, {id(unicode:characters_to_list(Utf8, unicode), TrUserData), Rest2} end,
    dfp_read_field_def_Logout(RestF, 0, 0, F, F@_1, NewFValue, TrUserData).

skip_varint_Logout(<<1:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> skip_varint_Logout(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData);
skip_varint_Logout(<<0:1, _:7, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Logout(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_length_delimited_Logout(<<1:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_Logout(Rest, N + 7, X bsl N + Acc, F, F@_1, F@_2, TrUserData);
skip_length_delimited_Logout(<<0:1, X:7, Rest/binary>>, N, Acc, F, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Logout(Rest2, 0, 0, F, F@_1, F@_2, TrUserData).

skip_group_Logout(Bin, _, Z2, FNum, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Logout(Rest, 0, Z2, FNum, F@_1, F@_2, TrUserData).

skip_32_Logout(<<_:32, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Logout(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

skip_64_Logout(<<_:64, Rest/binary>>, Z1, Z2, F, F@_1, F@_2, TrUserData) -> dfp_read_field_def_Logout(Rest, Z1, Z2, F, F@_1, F@_2, TrUserData).

d_enum_Type(0) -> 'REGISTER';
d_enum_Type(1) -> 'LOGIN';
d_enum_Type(2) -> 'LOGOUT';
d_enum_Type(3) -> 'REPLY';
d_enum_Type(4) -> 'LOCATION';
d_enum_Type(5) -> 'SICK';
d_enum_Type(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'Reply' -> merge_msg_Reply(Prev, New, TrUserData);
        'Message' -> merge_msg_Message(Prev, New, TrUserData);
        'Register' -> merge_msg_Register(Prev, New, TrUserData);
        'Login' -> merge_msg_Login(Prev, New, TrUserData);
        'Logout' -> merge_msg_Logout(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_Reply/3}).
merge_msg_Reply(#{}, #{result := NFresult, message := NFmessage}, _) -> #{result => NFresult, message => NFmessage}.

-compile({nowarn_unused_function,merge_msg_Message/3}).
merge_msg_Message(#{} = PMsg, #{type := NFtype} = NMsg, TrUserData) ->
    S1 = #{type => NFtype},
    S2 = case {PMsg, NMsg} of
             {#{registerData := PFregisterData}, #{registerData := NFregisterData}} -> S1#{registerData => merge_msg_Register(PFregisterData, NFregisterData, TrUserData)};
             {_, #{registerData := NFregisterData}} -> S1#{registerData => NFregisterData};
             {#{registerData := PFregisterData}, _} -> S1#{registerData => PFregisterData};
             {_, _} -> S1
         end,
    S3 = case {PMsg, NMsg} of
             {#{loginData := PFloginData}, #{loginData := NFloginData}} -> S2#{loginData => merge_msg_Login(PFloginData, NFloginData, TrUserData)};
             {_, #{loginData := NFloginData}} -> S2#{loginData => NFloginData};
             {#{loginData := PFloginData}, _} -> S2#{loginData => PFloginData};
             {_, _} -> S2
         end,
    S4 = case {PMsg, NMsg} of
             {#{logoutData := PFlogoutData}, #{logoutData := NFlogoutData}} -> S3#{logoutData => merge_msg_Logout(PFlogoutData, NFlogoutData, TrUserData)};
             {_, #{logoutData := NFlogoutData}} -> S3#{logoutData => NFlogoutData};
             {#{logoutData := PFlogoutData}, _} -> S3#{logoutData => PFlogoutData};
             {_, _} -> S3
         end,
    case {PMsg, NMsg} of
        {#{replyData := PFreplyData}, #{replyData := NFreplyData}} -> S4#{replyData => merge_msg_Reply(PFreplyData, NFreplyData, TrUserData)};
        {_, #{replyData := NFreplyData}} -> S4#{replyData => NFreplyData};
        {#{replyData := PFreplyData}, _} -> S4#{replyData => PFreplyData};
        {_, _} -> S4
    end.

-compile({nowarn_unused_function,merge_msg_Register/3}).
merge_msg_Register(#{}, #{username := NFusername, password := NFpassword, district := NFdistrict}, _) -> #{username => NFusername, password => NFpassword, district => NFdistrict}.

-compile({nowarn_unused_function,merge_msg_Login/3}).
merge_msg_Login(#{}, #{username := NFusername, password := NFpassword}, _) -> #{username => NFusername, password => NFpassword}.

-compile({nowarn_unused_function,merge_msg_Logout/3}).
merge_msg_Logout(#{}, #{username := NFusername, password := NFpassword}, _) -> #{username => NFusername, password => NFpassword}.


verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        'Reply' -> v_msg_Reply(Msg, [MsgName], TrUserData);
        'Message' -> v_msg_Message(Msg, [MsgName], TrUserData);
        'Register' -> v_msg_Register(Msg, [MsgName], TrUserData);
        'Login' -> v_msg_Login(Msg, [MsgName], TrUserData);
        'Logout' -> v_msg_Logout(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_Reply/3}).
-dialyzer({nowarn_function,v_msg_Reply/3}).
v_msg_Reply(#{result := F1, message := F2} = M, Path, TrUserData) ->
    v_type_bool(F1, [result | Path], TrUserData),
    v_type_string(F2, [message | Path], TrUserData),
    lists:foreach(fun (result) -> ok;
                      (message) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_Reply(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [result, message] -- maps:keys(M), 'Reply'}, M, Path);
v_msg_Reply(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Reply'}, X, Path).

-compile({nowarn_unused_function,v_msg_Message/3}).
-dialyzer({nowarn_function,v_msg_Message/3}).
v_msg_Message(#{type := F1} = M, Path, TrUserData) ->
    v_enum_Type(F1, [type | Path], TrUserData),
    case M of
        #{registerData := F2} -> v_msg_Register(F2, [registerData | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{loginData := F3} -> v_msg_Login(F3, [loginData | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{logoutData := F4} -> v_msg_Logout(F4, [logoutData | Path], TrUserData);
        _ -> ok
    end,
    case M of
        #{replyData := F5} -> v_msg_Reply(F5, [replyData | Path], TrUserData);
        _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
                      (registerData) -> ok;
                      (loginData) -> ok;
                      (logoutData) -> ok;
                      (replyData) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_Message(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [type] -- maps:keys(M), 'Message'}, M, Path);
v_msg_Message(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Message'}, X, Path).

-compile({nowarn_unused_function,v_msg_Register/3}).
-dialyzer({nowarn_function,v_msg_Register/3}).
v_msg_Register(#{username := F1, password := F2, district := F3} = M, Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    v_type_string(F3, [district | Path], TrUserData),
    lists:foreach(fun (username) -> ok;
                      (password) -> ok;
                      (district) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_Register(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [username, password, district] -- maps:keys(M), 'Register'}, M, Path);
v_msg_Register(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Register'}, X, Path).

-compile({nowarn_unused_function,v_msg_Login/3}).
-dialyzer({nowarn_function,v_msg_Login/3}).
v_msg_Login(#{username := F1, password := F2} = M, Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    lists:foreach(fun (username) -> ok;
                      (password) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_Login(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [username, password] -- maps:keys(M), 'Login'}, M, Path);
v_msg_Login(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Login'}, X, Path).

-compile({nowarn_unused_function,v_msg_Logout/3}).
-dialyzer({nowarn_function,v_msg_Logout/3}).
v_msg_Logout(#{username := F1, password := F2} = M, Path, TrUserData) ->
    v_type_string(F1, [username | Path], TrUserData),
    v_type_string(F2, [password | Path], TrUserData),
    lists:foreach(fun (username) -> ok;
                      (password) -> ok;
                      (OtherKey) -> mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_Logout(M, Path, _TrUserData) when is_map(M) -> mk_type_error({missing_fields, [username, password] -- maps:keys(M), 'Logout'}, M, Path);
v_msg_Logout(X, Path, _TrUserData) -> mk_type_error({expected_msg, 'Logout'}, X, Path).

-compile({nowarn_unused_function,v_enum_Type/3}).
-dialyzer({nowarn_function,v_enum_Type/3}).
v_enum_Type('REGISTER', _Path, _TrUserData) -> ok;
v_enum_Type('LOGIN', _Path, _TrUserData) -> ok;
v_enum_Type('LOGOUT', _Path, _TrUserData) -> ok;
v_enum_Type('REPLY', _Path, _TrUserData) -> ok;
v_enum_Type('LOCATION', _Path, _TrUserData) -> ok;
v_enum_Type('SICK', _Path, _TrUserData) -> ok;
v_enum_Type(V, _Path, _TrUserData) when -2147483648 =< V, V =< 2147483647, is_integer(V) -> ok;
v_enum_Type(X, Path, _TrUserData) -> mk_type_error({invalid_enum, 'Type'}, X, Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) -> mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> list_to_atom(lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'Type'}, [{'REGISTER', 0}, {'LOGIN', 1}, {'LOGOUT', 2}, {'REPLY', 3}, {'LOCATION', 4}, {'SICK', 5}]},
     {{msg, 'Reply'}, [#{name => result, fnum => 1, rnum => 2, type => bool, occurrence => required, opts => []}, #{name => message, fnum => 2, rnum => 3, type => string, occurrence => required, opts => []}]},
     {{msg, 'Message'},
      [#{name => type, fnum => 1, rnum => 2, type => {enum, 'Type'}, occurrence => required, opts => []},
       #{name => registerData, fnum => 2, rnum => 3, type => {msg, 'Register'}, occurrence => optional, opts => []},
       #{name => loginData, fnum => 3, rnum => 4, type => {msg, 'Login'}, occurrence => optional, opts => []},
       #{name => logoutData, fnum => 4, rnum => 5, type => {msg, 'Logout'}, occurrence => optional, opts => []},
       #{name => replyData, fnum => 5, rnum => 6, type => {msg, 'Reply'}, occurrence => optional, opts => []}]},
     {{msg, 'Register'},
      [#{name => username, fnum => 1, rnum => 2, type => string, occurrence => required, opts => []},
       #{name => password, fnum => 2, rnum => 3, type => string, occurrence => required, opts => []},
       #{name => district, fnum => 3, rnum => 4, type => string, occurrence => required, opts => []}]},
     {{msg, 'Login'}, [#{name => username, fnum => 1, rnum => 2, type => string, occurrence => required, opts => []}, #{name => password, fnum => 2, rnum => 3, type => string, occurrence => required, opts => []}]},
     {{msg, 'Logout'}, [#{name => username, fnum => 1, rnum => 2, type => string, occurrence => required, opts => []}, #{name => password, fnum => 2, rnum => 3, type => string, occurrence => required, opts => []}]}].


get_msg_names() -> ['Reply', 'Message', 'Register', 'Login', 'Logout'].


get_group_names() -> [].


get_msg_or_group_names() -> ['Reply', 'Message', 'Register', 'Login', 'Logout'].


get_enum_names() -> ['Type'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
        Es when is_list(Es) -> Es;
        error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('Reply') -> [#{name => result, fnum => 1, rnum => 2, type => bool, occurrence => required, opts => []}, #{name => message, fnum => 2, rnum => 3, type => string, occurrence => required, opts => []}];
find_msg_def('Message') ->
    [#{name => type, fnum => 1, rnum => 2, type => {enum, 'Type'}, occurrence => required, opts => []},
     #{name => registerData, fnum => 2, rnum => 3, type => {msg, 'Register'}, occurrence => optional, opts => []},
     #{name => loginData, fnum => 3, rnum => 4, type => {msg, 'Login'}, occurrence => optional, opts => []},
     #{name => logoutData, fnum => 4, rnum => 5, type => {msg, 'Logout'}, occurrence => optional, opts => []},
     #{name => replyData, fnum => 5, rnum => 6, type => {msg, 'Reply'}, occurrence => optional, opts => []}];
find_msg_def('Register') ->
    [#{name => username, fnum => 1, rnum => 2, type => string, occurrence => required, opts => []},
     #{name => password, fnum => 2, rnum => 3, type => string, occurrence => required, opts => []},
     #{name => district, fnum => 3, rnum => 4, type => string, occurrence => required, opts => []}];
find_msg_def('Login') -> [#{name => username, fnum => 1, rnum => 2, type => string, occurrence => required, opts => []}, #{name => password, fnum => 2, rnum => 3, type => string, occurrence => required, opts => []}];
find_msg_def('Logout') -> [#{name => username, fnum => 1, rnum => 2, type => string, occurrence => required, opts => []}, #{name => password, fnum => 2, rnum => 3, type => string, occurrence => required, opts => []}];
find_msg_def(_) -> error.


find_enum_def('Type') -> [{'REGISTER', 0}, {'LOGIN', 1}, {'LOGOUT', 2}, {'REPLY', 3}, {'LOCATION', 4}, {'SICK', 5}];
find_enum_def(_) -> error.


enum_symbol_by_value('Type', Value) -> enum_symbol_by_value_Type(Value).


enum_value_by_symbol('Type', Sym) -> enum_value_by_symbol_Type(Sym).


enum_symbol_by_value_Type(0) -> 'REGISTER';
enum_symbol_by_value_Type(1) -> 'LOGIN';
enum_symbol_by_value_Type(2) -> 'LOGOUT';
enum_symbol_by_value_Type(3) -> 'REPLY';
enum_symbol_by_value_Type(4) -> 'LOCATION';
enum_symbol_by_value_Type(5) -> 'SICK'.


enum_value_by_symbol_Type('REGISTER') -> 0;
enum_value_by_symbol_Type('LOGIN') -> 1;
enum_value_by_symbol_Type('LOGOUT') -> 2;
enum_value_by_symbol_Type('REPLY') -> 3;
enum_value_by_symbol_Type('LOCATION') -> 4;
enum_value_by_symbol_Type('SICK') -> 5.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"Protos.Reply">>) -> 'Reply';
fqbin_to_msg_name(<<"Protos.Message">>) -> 'Message';
fqbin_to_msg_name(<<"Protos.Register">>) -> 'Register';
fqbin_to_msg_name(<<"Protos.Login">>) -> 'Login';
fqbin_to_msg_name(<<"Protos.Logout">>) -> 'Logout';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('Reply') -> <<"Protos.Reply">>;
msg_name_to_fqbin('Message') -> <<"Protos.Message">>;
msg_name_to_fqbin('Register') -> <<"Protos.Register">>;
msg_name_to_fqbin('Login') -> <<"Protos.Login">>;
msg_name_to_fqbin('Logout') -> <<"Protos.Logout">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"Protos.Type">>) -> 'Type';
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('Type') -> <<"Protos.Type">>;
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> 'Protos'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "messages.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["messages.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["messages"].


get_msg_containment("messages") -> ['Login', 'Logout', 'Message', 'Register', 'Reply'];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("messages") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("messages") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("messages") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("messages") -> ['Type'];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"Protos.Register">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"Protos.Logout">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"Protos.Message">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"Protos.Reply">>) -> "messages";
get_proto_by_msg_name_as_fqbin(<<"Protos.Login">>) -> "messages";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"Protos.Type">>) -> "messages";
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.16.0".

gpb_version_as_list() ->
    [4,16,0].
